// Simplified Schema - AI Storage & Tracking Only
// This is your Prisma schema file for an AI-powered clothing inventory tracker

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  phone       String?
  avatar      String? // Profile picture URL
  role        UserRole @default(SELLER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Token budgets and limits (for AI usage tracking)
  dailyTokenBudget   Int      @default(100000)
  monthlyTokenBudget Int      @default(1000000)
  tokensUsedToday    Int      @default(0)
  tokensUsedMonth    Int      @default(0)
  lastTokenResetAt   DateTime @default(now())

  items         Item[]
  aiJobs        AIJob[]
  managerAudits ManagerAudit[]
  magicLinks    MagicLink[]
  sessions      Session[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  SELLER
  MANAGER
  ADMIN
}

// Magic Link Authentication (Passwordless)
model MagicLink {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique // Cryptographically secure random token
  email     String
  createdAt DateTime @default(now())
  expiresAt DateTime // Typically 15 minutes
  usedAt    DateTime?
  ipAddress String?
  userAgent String?

  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@index([userId])
}

// User Sessions
model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String   @unique // JWT or random session token
  createdAt    DateTime @default(now())
  expiresAt    DateTime // Typically 30 days
  lastActiveAt DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  deviceInfo   String? // Browser, OS, device type

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model Item {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Core item fields
  title       String
  brand       String?
  category    String // polo, hoodie, shirt, pullover, bottoms, jersey
  subcategory String?
  size        String?
  color       String?
  colorHex    String?
  material    String?
  style       String?
  sku         String?
  barcode     String?

  // Pricing
  manualPriceCents Int?
  suggestedPrice   Json? // { minCents, medianCents, maxCents, confidence, reasoning[], computedAt }

  // Condition
  manualConditionGrade String? // NWT, NWOT, Excellent, Good, Fair, Poor
  conditionSuggestion  Json? // { grade, defects[], confidence, computedAt }
  conditionNotes       String?

  // AI-generated content
  normalizedTags     String[]  @default([])
  aiCache            Json      @default("{}") // keyed by jobType_promptVersion
  pendingSuggestions Json      @default("[]") // array of suggestions awaiting seller confirmation
  lastAiRunAt        DateTime?
  lastNormalizedAt   DateTime?
  lastEmbeddingRunAt DateTime?

  // Embeddings (pgvector for semantic search)
  embedding      Unsupported("vector(1536)")?
  embeddingModel String? // e.g., "text-embedding-3-large"

  // Images
  imageUrls String[] @default([])
  imageKeys String[] @default([]) // S3 keys

  // Inventory tracking
  purchaseDate       DateTime? // When item was acquired
  purchasePriceCents Int? // What you paid for it
  status             ItemStatus @default(IN_STOCK)
  soldDate           DateTime?
  soldPriceCents     Int?
  soldPlatform       String? // Where it was sold (eBay, Poshmark, etc.)
  notes              String? // General notes about the item

  aiJobs AIJob[]
  tags   ItemTag[]

  @@index([userId])
  @@index([category])
  @@index([brand])
  @@index([status])
  @@index([purchaseDate])
}

enum ItemStatus {
  IN_STOCK // Available for sale
  LISTED // Listed on marketplace(s)
  SOLD // Item has been sold
  DONATED // Item was donated
  RETURNED // Item was returned to supplier
  DAMAGED // Item is damaged/unsellable
}

model Tag {
  id         String    @id @default(cuid())
  name       String    @unique
  normalized String    @unique // lowercase, trimmed
  createdAt  DateTime  @default(now())
  items      ItemTag[]

  @@index([normalized])
}

model ItemTag {
  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
}

model AIJob {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String?
  item      Item?    @relation(fields: [itemId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Job definition
  jobType       AIJobType
  inputPayload  Json // original input data
  inputHash     String // SHA256(inputPayload + promptVersion + jobType) for idempotency
  promptVersion String    @default("v1")

  // Deterministic baseline (computed before AI call)
  deterministicBaseline Json? // { median, mean, std, count, min, max, top5Comps[] }

  // Job execution
  status       AIJobStatus @default(PENDING)
  attempts     Int         @default(0)
  maxAttempts  Int         @default(3)
  availableAt  DateTime    @default(now()) // for exponential backoff
  result       Json? // parsed AI output
  rawOutput    String? // raw model response
  errorMessage String?

  // Model and cost tracking
  modelName    String? // gpt-4o-mini, text-embedding-3-large, etc
  tokensUsed   Int     @default(0)
  costEstimate Float   @default(0) // in USD

  // Manager workflow (for human-in-the-loop review)
  linearIssueId   String? // Linear issue ID if created
  linearIssueUrl  String?
  managerActions  Json      @default("[]") // array of { action, actorId, timestamp, reason }
  needsReview     Boolean   @default(false)
  managerApproved Boolean   @default(false)
  appliedAt       DateTime?
  appliedByUserId String?

  aiLogs        AILog[]
  managerAudits ManagerAudit[]

  @@index([userId])
  @@index([itemId])
  @@index([status])
  @@index([jobType])
  @@index([inputHash])
  @@index([availableAt])
  @@index([needsReview])
}

enum AIJobType {
  NORMALIZE // normalize attributes, tags, brand
  PRICE_SUGGESTION // suggest price range
  CONDITION_GRADE // suggest condition and defects
  GENERATE_LISTINGS // generate title/desc variants
  GENERATE_EMBEDDING // create vector embedding
  BULK_NORMALIZE
  BULK_PRICE
}

enum AIJobStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  NEEDS_REVIEW
  FAILED
  MANAGER_APPROVED
  REJECTED
}

model AILog {
  id        String   @id @default(cuid())
  aijobId   String
  aijob     AIJob    @relation(fields: [aijobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  modelName     String
  promptLength  Int // in characters
  requestBytes  Int
  responseBytes Int
  tokensUsed    Int
  costEstimate  Float // in USD
  latencyMs     Int?

  @@index([aijobId])
  @@index([createdAt])
}

model ManagerAudit {
  id        String   @id @default(cuid())
  aijobId   String?
  aijob     AIJob?   @relation(fields: [aijobId], references: [id], onDelete: SetNull)
  actorId   String
  actor     User     @relation(fields: [actorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  actionType    ManagerActionType
  actionPayload Json // { reason, changes, etc }
  ipAddress     String?
  userAgent     String?

  @@index([aijobId])
  @@index([actorId])
  @@index([createdAt])
}

enum ManagerActionType {
  APPROVE
  REJECT
  EDIT_SUGGESTION
  CREATE_LINEAR_ISSUE
  RETRY_JOB
  APPLY_TO_ITEM
  BULK_APPROVE
  BULK_REJECT
}

model Prompt {
  id        String   @id @default(cuid())
  version   String   @unique // e.g., "price_v1", "normalize_v2"
  template  String // actual prompt template
  createdAt DateTime @default(now())

  // Metadata
  jobType     AIJobType
  mcpRequired Boolean     @default(false) // must create Linear issue
  impactLevel ImpactLevel @default(LOW)
  modelName   String      @default("gpt-4o-mini")
  temperature Float       @default(0.2)
  maxTokens   Int         @default(2000)

  @@index([version])
  @@index([jobType])
}

enum ImpactLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model LinearSync {
  id        String   @id @default(cuid())
  issueId   String   @unique // Linear issue ID
  issueUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aijobId    String? // optional link to AIJob
  status     String // open, in_progress, done, canceled
  assigneeId String?
  priority   Int      @default(0)
  labels     String[]

  @@index([issueId])
  @@index([status])
}
