// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(SELLER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Token budgets and limits
  dailyTokenBudget   Int      @default(100000)
  monthlyTokenBudget Int      @default(1000000)
  tokensUsedToday    Int      @default(0)
  tokensUsedMonth    Int      @default(0)
  lastTokenResetAt   DateTime @default(now())

  // Marketplace integrations
  ebayAccessToken     String?
  poshmarkAccessToken String?
  grailedAccessToken  String?
  mercariAccessToken  String?

  items               Item[]
  aiJobs              AIJob[]
  managerAudits       ManagerAudit[]
  publishJobs         PublishJob[]
  publishPlans        PublishPlan[]
  marketplaceAccounts MarketplaceAccount[]
  csvExports          CSVExport[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  SELLER
  MANAGER
  ADMIN
}

model Item {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Core item fields
  title       String
  brand       String?
  category    String // polo, hoodie, shirt, pullover, bottoms, jersey
  subcategory String?
  size        String?
  color       String?
  colorHex    String?
  material    String?
  style       String?
  sku         String?
  barcode     String?

  // Pricing
  manualPriceCents Int?
  suggestedPrice   Json? // { minCents, medianCents, maxCents, confidence, reasoning[], computedAt }

  // Condition
  manualConditionGrade String? // NWT, NWOT, Excellent, Good, Fair, Poor
  conditionSuggestion  Json? // { grade, defects[], confidence, computedAt }
  conditionNotes       String?

  // AI-generated content
  normalizedTags     String[]  @default([])
  aiCache            Json      @default("{}") // keyed by jobType_promptVersion
  pendingSuggestions Json      @default("[]") // array of suggestions awaiting seller confirmation
  lastAiRunAt        DateTime?
  lastNormalizedAt   DateTime?
  lastEmbeddingRunAt DateTime?

  // Embeddings (pgvector)
  embedding      Unsupported("vector(1536)")?
  embeddingModel String? // e.g., "text-embedding-3-small"

  // Images
  imageUrls String[] @default([])
  imageKeys String[] @default([]) // S3 keys

  // Listing status
  listedEbay     Boolean   @default(false)
  listedPoshmark Boolean   @default(false)
  listedGrailed  Boolean   @default(false)
  listedMercari  Boolean   @default(false)
  ebayListingId  String?
  poshmarkListId String?
  grailedListId  String?
  mercariListId  String?
  daysRemaining  Int? // HP mechanic: days until 30-day period ends
  listedDate     DateTime? // When first listed

  aiJobs       AIJob[]
  tags         ItemTag[]
  publishJobs  PublishJob[]
  publishPlans PublishPlan[]

  @@index([userId])
  @@index([category])
  @@index([brand])
  @@index([listedDate])
}

model Tag {
  id         String    @id @default(cuid())
  name       String    @unique
  normalized String    @unique // lowercase, trimmed
  createdAt  DateTime  @default(now())
  items      ItemTag[]

  @@index([normalized])
}

model ItemTag {
  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
}

model AIJob {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String?
  item      Item?    @relation(fields: [itemId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Job definition
  jobType       AIJobType
  inputPayload  Json // original input data
  inputHash     String // SHA256(inputPayload + promptVersion + jobType) for idempotency
  promptVersion String    @default("v1")

  // Deterministic baseline (computed before AI call)
  deterministicBaseline Json? // { median, mean, std, count, min, max, top5Comps[] }

  // Job execution
  status       AIJobStatus @default(PENDING)
  attempts     Int         @default(0)
  maxAttempts  Int         @default(3)
  availableAt  DateTime    @default(now()) // for exponential backoff
  result       Json? // parsed AI output
  rawOutput    String? // raw model response
  errorMessage String?

  // Model and cost tracking
  modelName    String? // claude-sonnet-4.5, gpt-4o-mini, etc
  tokensUsed   Int     @default(0)
  costEstimate Float   @default(0) // in USD

  // Manager workflow
  linearIssueId   String? // Linear issue ID if created
  linearIssueUrl  String?
  managerActions  Json      @default("[]") // array of { action, actorId, timestamp, reason }
  needsReview     Boolean   @default(false)
  managerApproved Boolean   @default(false)
  appliedAt       DateTime?
  appliedByUserId String?

  aiLogs        AILog[]
  managerAudits ManagerAudit[]

  @@index([userId])
  @@index([itemId])
  @@index([status])
  @@index([jobType])
  @@index([inputHash])
  @@index([availableAt])
  @@index([needsReview])
}

enum AIJobType {
  NORMALIZE // normalize attributes, tags, brand
  PRICE_SUGGESTION // suggest price range
  CONDITION_GRADE // suggest condition and defects
  GENERATE_LISTINGS // generate title/desc variants
  GENERATE_EMBEDDING // create vector embedding
  BULK_NORMALIZE
  BULK_PRICE
}

enum AIJobStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  NEEDS_REVIEW
  FAILED
  MANAGER_APPROVED
  REJECTED
}

model AILog {
  id        String   @id @default(cuid())
  aijobId   String
  aijob     AIJob    @relation(fields: [aijobId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  modelName     String
  promptLength  Int // in characters
  requestBytes  Int
  responseBytes Int
  tokensUsed    Int
  costEstimate  Float // in USD
  latencyMs     Int?

  @@index([aijobId])
  @@index([createdAt])
}

model ManagerAudit {
  id           String      @id @default(cuid())
  aijobId      String?
  aijob        AIJob?      @relation(fields: [aijobId], references: [id], onDelete: SetNull)
  publishJobId String?
  publishJob   PublishJob? @relation("PublishJobAudits", fields: [publishJobId], references: [id], onDelete: SetNull)
  actorId      String
  actor        User        @relation(fields: [actorId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())

  actionType    ManagerActionType
  actionPayload Json // { reason, changes, etc }
  ipAddress     String?
  userAgent     String?

  @@index([aijobId])
  @@index([publishJobId])
  @@index([actorId])
  @@index([createdAt])
}

enum ManagerActionType {
  APPROVE
  REJECT
  EDIT_SUGGESTION
  CREATE_LINEAR_ISSUE
  RETRY_JOB
  APPLY_TO_ITEM
  BULK_APPROVE
  BULK_REJECT
  APPROVE_PUBLISH
  REJECT_PUBLISH
  CANCEL_PUBLISH
}

model Prompt {
  id        String   @id @default(cuid())
  version   String   @unique // e.g., "price_v1", "normalize_v2"
  template  String // actual prompt template
  createdAt DateTime @default(now())

  // Metadata
  jobType     AIJobType
  mcpRequired Boolean     @default(false) // must create Linear issue
  impactLevel ImpactLevel @default(LOW)
  modelName   String      @default("claude-sonnet-4.5")
  temperature Float       @default(0.2)
  maxTokens   Int         @default(2000)

  @@index([version])
  @@index([jobType])
}

enum ImpactLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model LinearSync {
  id        String   @id @default(cuid())
  issueId   String   @unique // Linear issue ID
  issueUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  aijobId    String? // optional link to AIJob
  status     String // open, in_progress, done, canceled
  assigneeId String?
  priority   Int      @default(0)
  labels     String[]

  @@index([issueId])
  @@index([status])
}

model PublishJob {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Publish plan
  planId               String? // Links to publish plan if created via prepare flow
  marketplace          Marketplace
  marketplaceAccountId String? // Which connected account to use
  publishType          PublishType @default(CREATE) // CREATE, UPDATE, DELETE

  // Listing payload
  inputPayload Json // Normalized listing data (title, desc, price, images, etc.)
  inputHash    String // SHA256(inputPayload + marketplace + publishType) for idempotency

  // Execution
  status      PublishJobStatus @default(PENDING)
  attempts    Int              @default(0)
  maxAttempts Int              @default(3)
  availableAt DateTime         @default(now()) // For exponential backoff

  // Results
  externalListingId String? // Marketplace's listing ID
  externalUrl       String? // Direct link to listing
  errorText         String? // Error message if failed
  errorCode         String? // Marketplace error code

  // Cost & Rate Limiting
  costEstimate       Float   @default(0) // Estimated marketplace fees
  actualCost         Float   @default(0) // Actual fees charged
  rateLimitHit       Boolean @default(false)
  circuitBreakerOpen Boolean @default(false)

  // Manager workflow
  managerApproved  Boolean @default(false)
  managerActions   Json    @default("[]") // Array of manager actions
  requiresApproval Boolean @default(false) // If true, needs manager approval before execute

  // Audit
  publishLogs   PublishLog[]
  managerAudits ManagerAudit[] @relation("PublishJobAudits")

  @@index([userId])
  @@index([itemId])
  @@index([marketplace])
  @@index([status])
  @@index([inputHash])
  @@index([availableAt])
  @@index([externalListingId])
}

enum PublishJobStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  NEEDS_REVIEW
  FAILED
  CANCELLED
}

enum PublishType {
  CREATE
  UPDATE
  DELETE
}

enum Marketplace {
  EBAY
  POSHMARK
  GRAILED
  MERCARI
  DEPOP
  SHOPIFY
  ETSY
  FACEBOOK_MARKETPLACE
  OFFERUP
  VINTED
}

model PublishLog {
  id           String     @id @default(cuid())
  publishJobId String
  publishJob   PublishJob @relation(fields: [publishJobId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  marketplace    Marketplace
  requestMethod  String // POST, PUT, DELETE
  requestUrl     String
  requestHeaders Json // Sanitized (no secrets)
  requestBody    Json // Sanitized
  responseStatus Int
  responseBody   Json
  latencyMs      Int?
  errorMessage   String?

  @@index([publishJobId])
  @@index([marketplace])
  @@index([createdAt])
}

model PublishPlan {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime // Plans expire after 15 minutes

  // Plan details
  marketplaces      Marketplace[]
  inputPayload      Json // Original listing data
  validationResults Json // Per-marketplace validation { ebay: { valid, warnings, errors }, ... }
  estimatedFees     Json // Per-marketplace fee estimates
  consentToken      String        @unique // One-time token for execute

  // Status
  executed   Boolean   @default(false)
  executedAt DateTime?

  @@index([userId])
  @@index([itemId])
  @@index([consentToken])
  @@index([expiresAt])
}

model MarketplaceAccount {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  marketplace       Marketplace
  accountName       String // User-friendly name
  externalAccountId String? // Marketplace's user/seller ID

  // OAuth tokens (encrypted at rest in production)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?

  // Status
  isActive   Boolean   @default(true)
  lastSyncAt DateTime?
  lastError  String?

  // Rate limiting
  dailyPublishCount Int      @default(0)
  dailyPublishLimit Int      @default(100)
  lastResetAt       DateTime @default(now())

  // Circuit breaker
  failureCount        Int       @default(0)
  circuitBreakerOpen  Boolean   @default(false)
  circuitBreakerUntil DateTime?

  @@unique([userId, marketplace, externalAccountId])
  @@index([userId])
  @@index([marketplace])
  @@index([isActive])
}

model CSVExport {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  marketplace Marketplace
  itemIds     String[] // Items included in export
  fileName    String
  fileUrl     String // S3 URL
  expiresAt   DateTime // Download link expires

  downloadCount Int @default(0)

  @@index([userId])
  @@index([marketplace])
  @@index([createdAt])
}
